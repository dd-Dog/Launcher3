// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup.proto

#ifndef PROTOBUF_backup_2eproto__INCLUDED
#define PROTOBUF_backup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace launcher_backup {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_backup_2eproto();
void protobuf_InitDefaults_backup_2eproto();
void protobuf_AssignDesc_backup_2eproto();
void protobuf_ShutdownFile_backup_2eproto();

class CheckedMessage;
class Favorite;
class Journal;
class Key;
class Resource;
class Screen;
class Widget;

enum Key_Type {
  Key_Type_FAVORITE = 1,
  Key_Type_SCREEN = 2,
  Key_Type_ICON = 3,
  Key_Type_WIDGET = 4
};
bool Key_Type_IsValid(int value);
const Key_Type Key_Type_Type_MIN = Key_Type_FAVORITE;
const Key_Type Key_Type_Type_MAX = Key_Type_WIDGET;
const int Key_Type_Type_ARRAYSIZE = Key_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Key_Type_descriptor();
inline const ::std::string& Key_Type_Name(Key_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Key_Type_descriptor(), value);
}
inline bool Key_Type_Parse(
    const ::std::string& name, Key_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Key_Type>(
    Key_Type_descriptor(), name, value);
}
// ===================================================================

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static const Key* internal_default_instance();

  void Swap(Key* other);

  // implements Message ----------------------------------------------

  inline Key* New() const { return New(NULL); }

  Key* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Key* other);
  void UnsafeMergeFrom(const Key& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Key_Type Type;
  static const Type FAVORITE =
    Key_Type_FAVORITE;
  static const Type SCREEN =
    Key_Type_SCREEN;
  static const Type ICON =
    Key_Type_ICON;
  static const Type WIDGET =
    Key_Type_WIDGET;
  static inline bool Type_IsValid(int value) {
    return Key_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Key_Type_Type_MIN;
  static const Type Type_MAX =
    Key_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Key_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Key_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Key_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Key_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .launcher_backup.Key.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::launcher_backup::Key_Type type() const;
  void set_type(::launcher_backup::Key_Type value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int64 id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 checksum = 4;
  bool has_checksum() const;
  void clear_checksum();
  static const int kChecksumFieldNumber = 4;
  ::google::protobuf::int64 checksum() const;
  void set_checksum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:launcher_backup.Key)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_checksum();
  inline void clear_has_checksum();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 checksum_;
  int type_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Key> Key_default_instance_;

// -------------------------------------------------------------------

class CheckedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.CheckedMessage) */ {
 public:
  CheckedMessage();
  virtual ~CheckedMessage();

  CheckedMessage(const CheckedMessage& from);

  inline CheckedMessage& operator=(const CheckedMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckedMessage& default_instance();

  static const CheckedMessage* internal_default_instance();

  void Swap(CheckedMessage* other);

  // implements Message ----------------------------------------------

  inline CheckedMessage* New() const { return New(NULL); }

  CheckedMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckedMessage& from);
  void MergeFrom(const CheckedMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CheckedMessage* other);
  void UnsafeMergeFrom(const CheckedMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes payload = 1;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 1;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // required int64 checksum = 2;
  bool has_checksum() const;
  void clear_checksum();
  static const int kChecksumFieldNumber = 2;
  ::google::protobuf::int64 checksum() const;
  void set_checksum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:launcher_backup.CheckedMessage)
 private:
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_checksum();
  inline void clear_has_checksum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::int64 checksum_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CheckedMessage> CheckedMessage_default_instance_;

// -------------------------------------------------------------------

class Journal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.Journal) */ {
 public:
  Journal();
  virtual ~Journal();

  Journal(const Journal& from);

  inline Journal& operator=(const Journal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Journal& default_instance();

  static const Journal* internal_default_instance();

  void Swap(Journal* other);

  // implements Message ----------------------------------------------

  inline Journal* New() const { return New(NULL); }

  Journal* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Journal& from);
  void MergeFrom(const Journal& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Journal* other);
  void UnsafeMergeFrom(const Journal& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 app_version = 1;
  bool has_app_version() const;
  void clear_app_version();
  static const int kAppVersionFieldNumber = 1;
  ::google::protobuf::int32 app_version() const;
  void set_app_version(::google::protobuf::int32 value);

  // required int64 t = 2;
  bool has_t() const;
  void clear_t();
  static const int kTFieldNumber = 2;
  ::google::protobuf::int64 t() const;
  void set_t(::google::protobuf::int64 value);

  // optional int64 bytes = 3;
  bool has_bytes() const;
  void clear_bytes();
  static const int kBytesFieldNumber = 3;
  ::google::protobuf::int64 bytes() const;
  void set_bytes(::google::protobuf::int64 value);

  // optional int32 rows = 4;
  bool has_rows() const;
  void clear_rows();
  static const int kRowsFieldNumber = 4;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // repeated .launcher_backup.Key key = 5;
  int key_size() const;
  void clear_key();
  static const int kKeyFieldNumber = 5;
  const ::launcher_backup::Key& key(int index) const;
  ::launcher_backup::Key* mutable_key(int index);
  ::launcher_backup::Key* add_key();
  ::google::protobuf::RepeatedPtrField< ::launcher_backup::Key >*
      mutable_key();
  const ::google::protobuf::RepeatedPtrField< ::launcher_backup::Key >&
      key() const;

  // @@protoc_insertion_point(class_scope:launcher_backup.Journal)
 private:
  inline void set_has_app_version();
  inline void clear_has_app_version();
  inline void set_has_t();
  inline void clear_has_t();
  inline void set_has_bytes();
  inline void clear_has_bytes();
  inline void set_has_rows();
  inline void clear_has_rows();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::launcher_backup::Key > key_;
  ::google::protobuf::int64 t_;
  ::google::protobuf::int32 app_version_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int64 bytes_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Journal> Journal_default_instance_;

// -------------------------------------------------------------------

class Favorite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.Favorite) */ {
 public:
  Favorite();
  virtual ~Favorite();

  Favorite(const Favorite& from);

  inline Favorite& operator=(const Favorite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Favorite& default_instance();

  static const Favorite* internal_default_instance();

  void Swap(Favorite* other);

  // implements Message ----------------------------------------------

  inline Favorite* New() const { return New(NULL); }

  Favorite* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Favorite& from);
  void MergeFrom(const Favorite& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Favorite* other);
  void UnsafeMergeFrom(const Favorite& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required int32 itemType = 2;
  bool has_itemtype() const;
  void clear_itemtype();
  static const int kItemTypeFieldNumber = 2;
  ::google::protobuf::int32 itemtype() const;
  void set_itemtype(::google::protobuf::int32 value);

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 3;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional int32 container = 4;
  bool has_container() const;
  void clear_container();
  static const int kContainerFieldNumber = 4;
  ::google::protobuf::int32 container() const;
  void set_container(::google::protobuf::int32 value);

  // optional int32 screen = 5;
  bool has_screen() const;
  void clear_screen();
  static const int kScreenFieldNumber = 5;
  ::google::protobuf::int32 screen() const;
  void set_screen(::google::protobuf::int32 value);

  // optional int32 cellX = 6;
  bool has_cellx() const;
  void clear_cellx();
  static const int kCellXFieldNumber = 6;
  ::google::protobuf::int32 cellx() const;
  void set_cellx(::google::protobuf::int32 value);

  // optional int32 cellY = 7;
  bool has_celly() const;
  void clear_celly();
  static const int kCellYFieldNumber = 7;
  ::google::protobuf::int32 celly() const;
  void set_celly(::google::protobuf::int32 value);

  // optional int32 spanX = 8;
  bool has_spanx() const;
  void clear_spanx();
  static const int kSpanXFieldNumber = 8;
  ::google::protobuf::int32 spanx() const;
  void set_spanx(::google::protobuf::int32 value);

  // optional int32 spanY = 9;
  bool has_spany() const;
  void clear_spany();
  static const int kSpanYFieldNumber = 9;
  ::google::protobuf::int32 spany() const;
  void set_spany(::google::protobuf::int32 value);

  // optional int32 displayMode = 10;
  bool has_displaymode() const;
  void clear_displaymode();
  static const int kDisplayModeFieldNumber = 10;
  ::google::protobuf::int32 displaymode() const;
  void set_displaymode(::google::protobuf::int32 value);

  // optional int32 appWidgetId = 11;
  bool has_appwidgetid() const;
  void clear_appwidgetid();
  static const int kAppWidgetIdFieldNumber = 11;
  ::google::protobuf::int32 appwidgetid() const;
  void set_appwidgetid(::google::protobuf::int32 value);

  // optional string appWidgetProvider = 12;
  bool has_appwidgetprovider() const;
  void clear_appwidgetprovider();
  static const int kAppWidgetProviderFieldNumber = 12;
  const ::std::string& appwidgetprovider() const;
  void set_appwidgetprovider(const ::std::string& value);
  void set_appwidgetprovider(const char* value);
  void set_appwidgetprovider(const char* value, size_t size);
  ::std::string* mutable_appwidgetprovider();
  ::std::string* release_appwidgetprovider();
  void set_allocated_appwidgetprovider(::std::string* appwidgetprovider);

  // optional string intent = 13;
  bool has_intent() const;
  void clear_intent();
  static const int kIntentFieldNumber = 13;
  const ::std::string& intent() const;
  void set_intent(const ::std::string& value);
  void set_intent(const char* value);
  void set_intent(const char* value, size_t size);
  ::std::string* mutable_intent();
  ::std::string* release_intent();
  void set_allocated_intent(::std::string* intent);

  // optional string uri = 14;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 14;
  const ::std::string& uri() const;
  void set_uri(const ::std::string& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  ::std::string* mutable_uri();
  ::std::string* release_uri();
  void set_allocated_uri(::std::string* uri);

  // optional int32 iconType = 15;
  bool has_icontype() const;
  void clear_icontype();
  static const int kIconTypeFieldNumber = 15;
  ::google::protobuf::int32 icontype() const;
  void set_icontype(::google::protobuf::int32 value);

  // optional string iconPackage = 16;
  bool has_iconpackage() const;
  void clear_iconpackage();
  static const int kIconPackageFieldNumber = 16;
  const ::std::string& iconpackage() const;
  void set_iconpackage(const ::std::string& value);
  void set_iconpackage(const char* value);
  void set_iconpackage(const char* value, size_t size);
  ::std::string* mutable_iconpackage();
  ::std::string* release_iconpackage();
  void set_allocated_iconpackage(::std::string* iconpackage);

  // optional string iconResource = 17;
  bool has_iconresource() const;
  void clear_iconresource();
  static const int kIconResourceFieldNumber = 17;
  const ::std::string& iconresource() const;
  void set_iconresource(const ::std::string& value);
  void set_iconresource(const char* value);
  void set_iconresource(const char* value, size_t size);
  ::std::string* mutable_iconresource();
  ::std::string* release_iconresource();
  void set_allocated_iconresource(::std::string* iconresource);

  // optional bytes icon = 18;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 18;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  void set_icon(const char* value);
  void set_icon(const void* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:launcher_backup.Favorite)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_container();
  inline void clear_has_container();
  inline void set_has_screen();
  inline void clear_has_screen();
  inline void set_has_cellx();
  inline void clear_has_cellx();
  inline void set_has_celly();
  inline void clear_has_celly();
  inline void set_has_spanx();
  inline void clear_has_spanx();
  inline void set_has_spany();
  inline void clear_has_spany();
  inline void set_has_displaymode();
  inline void clear_has_displaymode();
  inline void set_has_appwidgetid();
  inline void clear_has_appwidgetid();
  inline void set_has_appwidgetprovider();
  inline void clear_has_appwidgetprovider();
  inline void set_has_intent();
  inline void clear_has_intent();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_icontype();
  inline void clear_has_icontype();
  inline void set_has_iconpackage();
  inline void clear_has_iconpackage();
  inline void set_has_iconresource();
  inline void clear_has_iconresource();
  inline void set_has_icon();
  inline void clear_has_icon();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr appwidgetprovider_;
  ::google::protobuf::internal::ArenaStringPtr intent_;
  ::google::protobuf::internal::ArenaStringPtr uri_;
  ::google::protobuf::internal::ArenaStringPtr iconpackage_;
  ::google::protobuf::internal::ArenaStringPtr iconresource_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 itemtype_;
  ::google::protobuf::int32 container_;
  ::google::protobuf::int32 screen_;
  ::google::protobuf::int32 cellx_;
  ::google::protobuf::int32 celly_;
  ::google::protobuf::int32 spanx_;
  ::google::protobuf::int32 spany_;
  ::google::protobuf::int32 displaymode_;
  ::google::protobuf::int32 appwidgetid_;
  ::google::protobuf::int32 icontype_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Favorite> Favorite_default_instance_;

// -------------------------------------------------------------------

class Screen : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.Screen) */ {
 public:
  Screen();
  virtual ~Screen();

  Screen(const Screen& from);

  inline Screen& operator=(const Screen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Screen& default_instance();

  static const Screen* internal_default_instance();

  void Swap(Screen* other);

  // implements Message ----------------------------------------------

  inline Screen* New() const { return New(NULL); }

  Screen* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Screen& from);
  void MergeFrom(const Screen& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Screen* other);
  void UnsafeMergeFrom(const Screen& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int32 rank = 2;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 2;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:launcher_backup.Screen)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Screen> Screen_default_instance_;

// -------------------------------------------------------------------

class Resource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.Resource) */ {
 public:
  Resource();
  virtual ~Resource();

  Resource(const Resource& from);

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Resource& default_instance();

  static const Resource* internal_default_instance();

  void Swap(Resource* other);

  // implements Message ----------------------------------------------

  inline Resource* New() const { return New(NULL); }

  Resource* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Resource& from);
  void MergeFrom(const Resource& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Resource* other);
  void UnsafeMergeFrom(const Resource& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dpi = 1;
  bool has_dpi() const;
  void clear_dpi();
  static const int kDpiFieldNumber = 1;
  ::google::protobuf::int32 dpi() const;
  void set_dpi(::google::protobuf::int32 value);

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:launcher_backup.Resource)
 private:
  inline void set_has_dpi();
  inline void clear_has_dpi();
  inline void set_has_data();
  inline void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 dpi_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Resource> Resource_default_instance_;

// -------------------------------------------------------------------

class Widget : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:launcher_backup.Widget) */ {
 public:
  Widget();
  virtual ~Widget();

  Widget(const Widget& from);

  inline Widget& operator=(const Widget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Widget& default_instance();

  static const Widget* internal_default_instance();

  void Swap(Widget* other);

  // implements Message ----------------------------------------------

  inline Widget* New() const { return New(NULL); }

  Widget* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Widget& from);
  void MergeFrom(const Widget& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Widget* other);
  void UnsafeMergeFrom(const Widget& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string provider = 1;
  bool has_provider() const;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  const ::std::string& provider() const;
  void set_provider(const ::std::string& value);
  void set_provider(const char* value);
  void set_provider(const char* value, size_t size);
  ::std::string* mutable_provider();
  ::std::string* release_provider();
  void set_allocated_provider(::std::string* provider);

  // optional string label = 2;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 2;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // optional bool configure = 3;
  bool has_configure() const;
  void clear_configure();
  static const int kConfigureFieldNumber = 3;
  bool configure() const;
  void set_configure(bool value);

  // optional .launcher_backup.Resource icon = 4;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::launcher_backup::Resource& icon() const;
  ::launcher_backup::Resource* mutable_icon();
  ::launcher_backup::Resource* release_icon();
  void set_allocated_icon(::launcher_backup::Resource* icon);

  // optional .launcher_backup.Resource preview = 5;
  bool has_preview() const;
  void clear_preview();
  static const int kPreviewFieldNumber = 5;
  const ::launcher_backup::Resource& preview() const;
  ::launcher_backup::Resource* mutable_preview();
  ::launcher_backup::Resource* release_preview();
  void set_allocated_preview(::launcher_backup::Resource* preview);

  // @@protoc_insertion_point(class_scope:launcher_backup.Widget)
 private:
  inline void set_has_provider();
  inline void clear_has_provider();
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_configure();
  inline void clear_has_configure();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_preview();
  inline void clear_has_preview();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr provider_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::launcher_backup::Resource* icon_;
  ::launcher_backup::Resource* preview_;
  bool configure_;
  friend void  protobuf_InitDefaults_backup_2eproto_impl();
  friend void  protobuf_AddDesc_backup_2eproto_impl();
  friend void protobuf_AssignDesc_backup_2eproto();
  friend void protobuf_ShutdownFile_backup_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Widget> Widget_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// required .launcher_backup.Key.Type type = 1;
inline bool Key::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Key::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Key::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Key::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::launcher_backup::Key_Type Key::type() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.type)
  return static_cast< ::launcher_backup::Key_Type >(type_);
}
inline void Key::set_type(::launcher_backup::Key_Type value) {
  assert(::launcher_backup::Key_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Key.type)
}

// optional string name = 2;
inline bool Key::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Key::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Key::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Key::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Key::name() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Key.name)
}
inline void Key::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Key.name)
}
inline void Key::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Key.name)
}
inline ::std::string* Key::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Key.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_name() {
  // @@protoc_insertion_point(field_release:launcher_backup.Key.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Key.name)
}

// optional int64 id = 3;
inline bool Key::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Key::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Key::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Key::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Key::id() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.id)
  return id_;
}
inline void Key::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Key.id)
}

// optional int64 checksum = 4;
inline bool Key::has_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Key::set_has_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Key::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Key::clear_checksum() {
  checksum_ = GOOGLE_LONGLONG(0);
  clear_has_checksum();
}
inline ::google::protobuf::int64 Key::checksum() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.checksum)
  return checksum_;
}
inline void Key::set_checksum(::google::protobuf::int64 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Key.checksum)
}

inline const Key* Key::internal_default_instance() {
  return &Key_default_instance_.get();
}
// -------------------------------------------------------------------

// CheckedMessage

// required bytes payload = 1;
inline bool CheckedMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckedMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckedMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckedMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string& CheckedMessage::payload() const {
  // @@protoc_insertion_point(field_get:launcher_backup.CheckedMessage.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckedMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.CheckedMessage.payload)
}
inline void CheckedMessage::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.CheckedMessage.payload)
}
inline void CheckedMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.CheckedMessage.payload)
}
inline ::std::string* CheckedMessage::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:launcher_backup.CheckedMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CheckedMessage::release_payload() {
  // @@protoc_insertion_point(field_release:launcher_backup.CheckedMessage.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CheckedMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.CheckedMessage.payload)
}

// required int64 checksum = 2;
inline bool CheckedMessage::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckedMessage::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckedMessage::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckedMessage::clear_checksum() {
  checksum_ = GOOGLE_LONGLONG(0);
  clear_has_checksum();
}
inline ::google::protobuf::int64 CheckedMessage::checksum() const {
  // @@protoc_insertion_point(field_get:launcher_backup.CheckedMessage.checksum)
  return checksum_;
}
inline void CheckedMessage::set_checksum(::google::protobuf::int64 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.CheckedMessage.checksum)
}

inline const CheckedMessage* CheckedMessage::internal_default_instance() {
  return &CheckedMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// Journal

// required int32 app_version = 1;
inline bool Journal::has_app_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Journal::set_has_app_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Journal::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Journal::clear_app_version() {
  app_version_ = 0;
  clear_has_app_version();
}
inline ::google::protobuf::int32 Journal::app_version() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.app_version)
  return app_version_;
}
inline void Journal::set_app_version(::google::protobuf::int32 value) {
  set_has_app_version();
  app_version_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.app_version)
}

// required int64 t = 2;
inline bool Journal::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Journal::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Journal::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Journal::clear_t() {
  t_ = GOOGLE_LONGLONG(0);
  clear_has_t();
}
inline ::google::protobuf::int64 Journal::t() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.t)
  return t_;
}
inline void Journal::set_t(::google::protobuf::int64 value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.t)
}

// optional int64 bytes = 3;
inline bool Journal::has_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Journal::set_has_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Journal::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Journal::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
  clear_has_bytes();
}
inline ::google::protobuf::int64 Journal::bytes() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.bytes)
  return bytes_;
}
inline void Journal::set_bytes(::google::protobuf::int64 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.bytes)
}

// optional int32 rows = 4;
inline bool Journal::has_rows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Journal::set_has_rows() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Journal::clear_has_rows() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Journal::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
inline ::google::protobuf::int32 Journal::rows() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.rows)
  return rows_;
}
inline void Journal::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.rows)
}

// repeated .launcher_backup.Key key = 5;
inline int Journal::key_size() const {
  return key_.size();
}
inline void Journal::clear_key() {
  key_.Clear();
}
inline const ::launcher_backup::Key& Journal::key(int index) const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.key)
  return key_.Get(index);
}
inline ::launcher_backup::Key* Journal::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:launcher_backup.Journal.key)
  return key_.Mutable(index);
}
inline ::launcher_backup::Key* Journal::add_key() {
  // @@protoc_insertion_point(field_add:launcher_backup.Journal.key)
  return key_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::launcher_backup::Key >*
Journal::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:launcher_backup.Journal.key)
  return &key_;
}
inline const ::google::protobuf::RepeatedPtrField< ::launcher_backup::Key >&
Journal::key() const {
  // @@protoc_insertion_point(field_list:launcher_backup.Journal.key)
  return key_;
}

inline const Journal* Journal::internal_default_instance() {
  return &Journal_default_instance_.get();
}
// -------------------------------------------------------------------

// Favorite

// required int64 id = 1;
inline bool Favorite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Favorite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Favorite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Favorite::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Favorite::id() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.id)
  return id_;
}
inline void Favorite::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.id)
}

// required int32 itemType = 2;
inline bool Favorite::has_itemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Favorite::set_has_itemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Favorite::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Favorite::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::google::protobuf::int32 Favorite::itemtype() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.itemType)
  return itemtype_;
}
inline void Favorite::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.itemType)
}

// optional string title = 3;
inline bool Favorite::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Favorite::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Favorite::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Favorite::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& Favorite::title() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.title)
}
inline void Favorite::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.title)
}
inline void Favorite::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.title)
}
inline ::std::string* Favorite::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_title() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.title)
}

// optional int32 container = 4;
inline bool Favorite::has_container() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Favorite::set_has_container() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Favorite::clear_has_container() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Favorite::clear_container() {
  container_ = 0;
  clear_has_container();
}
inline ::google::protobuf::int32 Favorite::container() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.container)
  return container_;
}
inline void Favorite::set_container(::google::protobuf::int32 value) {
  set_has_container();
  container_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.container)
}

// optional int32 screen = 5;
inline bool Favorite::has_screen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Favorite::set_has_screen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Favorite::clear_has_screen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Favorite::clear_screen() {
  screen_ = 0;
  clear_has_screen();
}
inline ::google::protobuf::int32 Favorite::screen() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.screen)
  return screen_;
}
inline void Favorite::set_screen(::google::protobuf::int32 value) {
  set_has_screen();
  screen_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.screen)
}

// optional int32 cellX = 6;
inline bool Favorite::has_cellx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Favorite::set_has_cellx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Favorite::clear_has_cellx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Favorite::clear_cellx() {
  cellx_ = 0;
  clear_has_cellx();
}
inline ::google::protobuf::int32 Favorite::cellx() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.cellX)
  return cellx_;
}
inline void Favorite::set_cellx(::google::protobuf::int32 value) {
  set_has_cellx();
  cellx_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.cellX)
}

// optional int32 cellY = 7;
inline bool Favorite::has_celly() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Favorite::set_has_celly() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Favorite::clear_has_celly() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Favorite::clear_celly() {
  celly_ = 0;
  clear_has_celly();
}
inline ::google::protobuf::int32 Favorite::celly() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.cellY)
  return celly_;
}
inline void Favorite::set_celly(::google::protobuf::int32 value) {
  set_has_celly();
  celly_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.cellY)
}

// optional int32 spanX = 8;
inline bool Favorite::has_spanx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Favorite::set_has_spanx() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Favorite::clear_has_spanx() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Favorite::clear_spanx() {
  spanx_ = 0;
  clear_has_spanx();
}
inline ::google::protobuf::int32 Favorite::spanx() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.spanX)
  return spanx_;
}
inline void Favorite::set_spanx(::google::protobuf::int32 value) {
  set_has_spanx();
  spanx_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.spanX)
}

// optional int32 spanY = 9;
inline bool Favorite::has_spany() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Favorite::set_has_spany() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Favorite::clear_has_spany() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Favorite::clear_spany() {
  spany_ = 0;
  clear_has_spany();
}
inline ::google::protobuf::int32 Favorite::spany() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.spanY)
  return spany_;
}
inline void Favorite::set_spany(::google::protobuf::int32 value) {
  set_has_spany();
  spany_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.spanY)
}

// optional int32 displayMode = 10;
inline bool Favorite::has_displaymode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Favorite::set_has_displaymode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Favorite::clear_has_displaymode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Favorite::clear_displaymode() {
  displaymode_ = 0;
  clear_has_displaymode();
}
inline ::google::protobuf::int32 Favorite::displaymode() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.displayMode)
  return displaymode_;
}
inline void Favorite::set_displaymode(::google::protobuf::int32 value) {
  set_has_displaymode();
  displaymode_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.displayMode)
}

// optional int32 appWidgetId = 11;
inline bool Favorite::has_appwidgetid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Favorite::set_has_appwidgetid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Favorite::clear_has_appwidgetid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Favorite::clear_appwidgetid() {
  appwidgetid_ = 0;
  clear_has_appwidgetid();
}
inline ::google::protobuf::int32 Favorite::appwidgetid() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.appWidgetId)
  return appwidgetid_;
}
inline void Favorite::set_appwidgetid(::google::protobuf::int32 value) {
  set_has_appwidgetid();
  appwidgetid_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.appWidgetId)
}

// optional string appWidgetProvider = 12;
inline bool Favorite::has_appwidgetprovider() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Favorite::set_has_appwidgetprovider() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Favorite::clear_has_appwidgetprovider() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Favorite::clear_appwidgetprovider() {
  appwidgetprovider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appwidgetprovider();
}
inline const ::std::string& Favorite::appwidgetprovider() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.appWidgetProvider)
  return appwidgetprovider_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_appwidgetprovider(const ::std::string& value) {
  set_has_appwidgetprovider();
  appwidgetprovider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.appWidgetProvider)
}
inline void Favorite::set_appwidgetprovider(const char* value) {
  set_has_appwidgetprovider();
  appwidgetprovider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.appWidgetProvider)
}
inline void Favorite::set_appwidgetprovider(const char* value, size_t size) {
  set_has_appwidgetprovider();
  appwidgetprovider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.appWidgetProvider)
}
inline ::std::string* Favorite::mutable_appwidgetprovider() {
  set_has_appwidgetprovider();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.appWidgetProvider)
  return appwidgetprovider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_appwidgetprovider() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.appWidgetProvider)
  clear_has_appwidgetprovider();
  return appwidgetprovider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_appwidgetprovider(::std::string* appwidgetprovider) {
  if (appwidgetprovider != NULL) {
    set_has_appwidgetprovider();
  } else {
    clear_has_appwidgetprovider();
  }
  appwidgetprovider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appwidgetprovider);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.appWidgetProvider)
}

// optional string intent = 13;
inline bool Favorite::has_intent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Favorite::set_has_intent() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Favorite::clear_has_intent() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Favorite::clear_intent() {
  intent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_intent();
}
inline const ::std::string& Favorite::intent() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.intent)
  return intent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_intent(const ::std::string& value) {
  set_has_intent();
  intent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.intent)
}
inline void Favorite::set_intent(const char* value) {
  set_has_intent();
  intent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.intent)
}
inline void Favorite::set_intent(const char* value, size_t size) {
  set_has_intent();
  intent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.intent)
}
inline ::std::string* Favorite::mutable_intent() {
  set_has_intent();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.intent)
  return intent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_intent() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.intent)
  clear_has_intent();
  return intent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_intent(::std::string* intent) {
  if (intent != NULL) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  intent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intent);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.intent)
}

// optional string uri = 14;
inline bool Favorite::has_uri() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Favorite::set_has_uri() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Favorite::clear_has_uri() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Favorite::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
inline const ::std::string& Favorite::uri() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.uri)
}
inline void Favorite::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.uri)
}
inline void Favorite::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.uri)
}
inline ::std::string* Favorite::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_uri() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.uri)
}

// optional int32 iconType = 15;
inline bool Favorite::has_icontype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Favorite::set_has_icontype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Favorite::clear_has_icontype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Favorite::clear_icontype() {
  icontype_ = 0;
  clear_has_icontype();
}
inline ::google::protobuf::int32 Favorite::icontype() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.iconType)
  return icontype_;
}
inline void Favorite::set_icontype(::google::protobuf::int32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.iconType)
}

// optional string iconPackage = 16;
inline bool Favorite::has_iconpackage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Favorite::set_has_iconpackage() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Favorite::clear_has_iconpackage() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Favorite::clear_iconpackage() {
  iconpackage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconpackage();
}
inline const ::std::string& Favorite::iconpackage() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.iconPackage)
  return iconpackage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_iconpackage(const ::std::string& value) {
  set_has_iconpackage();
  iconpackage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.iconPackage)
}
inline void Favorite::set_iconpackage(const char* value) {
  set_has_iconpackage();
  iconpackage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.iconPackage)
}
inline void Favorite::set_iconpackage(const char* value, size_t size) {
  set_has_iconpackage();
  iconpackage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.iconPackage)
}
inline ::std::string* Favorite::mutable_iconpackage() {
  set_has_iconpackage();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.iconPackage)
  return iconpackage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_iconpackage() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.iconPackage)
  clear_has_iconpackage();
  return iconpackage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_iconpackage(::std::string* iconpackage) {
  if (iconpackage != NULL) {
    set_has_iconpackage();
  } else {
    clear_has_iconpackage();
  }
  iconpackage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconpackage);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.iconPackage)
}

// optional string iconResource = 17;
inline bool Favorite::has_iconresource() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Favorite::set_has_iconresource() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Favorite::clear_has_iconresource() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Favorite::clear_iconresource() {
  iconresource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconresource();
}
inline const ::std::string& Favorite::iconresource() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.iconResource)
  return iconresource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_iconresource(const ::std::string& value) {
  set_has_iconresource();
  iconresource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.iconResource)
}
inline void Favorite::set_iconresource(const char* value) {
  set_has_iconresource();
  iconresource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.iconResource)
}
inline void Favorite::set_iconresource(const char* value, size_t size) {
  set_has_iconresource();
  iconresource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.iconResource)
}
inline ::std::string* Favorite::mutable_iconresource() {
  set_has_iconresource();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.iconResource)
  return iconresource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_iconresource() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.iconResource)
  clear_has_iconresource();
  return iconresource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_iconresource(::std::string* iconresource) {
  if (iconresource != NULL) {
    set_has_iconresource();
  } else {
    clear_has_iconresource();
  }
  iconresource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconresource);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.iconResource)
}

// optional bytes icon = 18;
inline bool Favorite::has_icon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Favorite::set_has_icon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Favorite::clear_has_icon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Favorite::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& Favorite::icon() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.icon)
}
inline void Favorite::set_icon(const char* value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.icon)
}
inline void Favorite::set_icon(const void* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.icon)
}
inline ::std::string* Favorite::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Favorite::release_icon() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Favorite::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.icon)
}

inline const Favorite* Favorite::internal_default_instance() {
  return &Favorite_default_instance_.get();
}
// -------------------------------------------------------------------

// Screen

// required int64 id = 1;
inline bool Screen::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Screen::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Screen::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Screen::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Screen::id() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Screen.id)
  return id_;
}
inline void Screen::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Screen.id)
}

// optional int32 rank = 2;
inline bool Screen::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Screen::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Screen::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Screen::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Screen::rank() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Screen.rank)
  return rank_;
}
inline void Screen::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Screen.rank)
}

inline const Screen* Screen::internal_default_instance() {
  return &Screen_default_instance_.get();
}
// -------------------------------------------------------------------

// Resource

// required int32 dpi = 1;
inline bool Resource::has_dpi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Resource::set_has_dpi() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Resource::clear_has_dpi() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Resource::clear_dpi() {
  dpi_ = 0;
  clear_has_dpi();
}
inline ::google::protobuf::int32 Resource::dpi() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Resource.dpi)
  return dpi_;
}
inline void Resource::set_dpi(::google::protobuf::int32 value) {
  set_has_dpi();
  dpi_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Resource.dpi)
}

// required bytes data = 2;
inline bool Resource::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Resource::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Resource::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Resource::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Resource::data() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Resource.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Resource.data)
}
inline void Resource::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Resource.data)
}
inline void Resource::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Resource.data)
}
inline ::std::string* Resource::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Resource.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Resource::release_data() {
  // @@protoc_insertion_point(field_release:launcher_backup.Resource.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Resource::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Resource.data)
}

inline const Resource* Resource::internal_default_instance() {
  return &Resource_default_instance_.get();
}
// -------------------------------------------------------------------

// Widget

// required string provider = 1;
inline bool Widget::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Widget::set_has_provider() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Widget::clear_has_provider() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Widget::clear_provider() {
  provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_provider();
}
inline const ::std::string& Widget::provider() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.provider)
  return provider_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Widget::set_provider(const ::std::string& value) {
  set_has_provider();
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Widget.provider)
}
inline void Widget::set_provider(const char* value) {
  set_has_provider();
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Widget.provider)
}
inline void Widget::set_provider(const char* value, size_t size) {
  set_has_provider();
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Widget.provider)
}
inline ::std::string* Widget::mutable_provider() {
  set_has_provider();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.provider)
  return provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Widget::release_provider() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.provider)
  clear_has_provider();
  return provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Widget::set_allocated_provider(::std::string* provider) {
  if (provider != NULL) {
    set_has_provider();
  } else {
    clear_has_provider();
  }
  provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.provider)
}

// optional string label = 2;
inline bool Widget::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Widget::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Widget::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Widget::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
inline const ::std::string& Widget::label() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Widget::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Widget.label)
}
inline void Widget::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Widget.label)
}
inline void Widget::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Widget.label)
}
inline ::std::string* Widget::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Widget::release_label() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Widget::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.label)
}

// optional bool configure = 3;
inline bool Widget::has_configure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Widget::set_has_configure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Widget::clear_has_configure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Widget::clear_configure() {
  configure_ = false;
  clear_has_configure();
}
inline bool Widget::configure() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.configure)
  return configure_;
}
inline void Widget::set_configure(bool value) {
  set_has_configure();
  configure_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Widget.configure)
}

// optional .launcher_backup.Resource icon = 4;
inline bool Widget::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Widget::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Widget::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Widget::clear_icon() {
  if (icon_ != NULL) icon_->::launcher_backup::Resource::Clear();
  clear_has_icon();
}
inline const ::launcher_backup::Resource& Widget::icon() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.icon)
  return icon_ != NULL ? *icon_
                         : *::launcher_backup::Resource::internal_default_instance();
}
inline ::launcher_backup::Resource* Widget::mutable_icon() {
  set_has_icon();
  if (icon_ == NULL) {
    icon_ = new ::launcher_backup::Resource;
  }
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.icon)
  return icon_;
}
inline ::launcher_backup::Resource* Widget::release_icon() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.icon)
  clear_has_icon();
  ::launcher_backup::Resource* temp = icon_;
  icon_ = NULL;
  return temp;
}
inline void Widget::set_allocated_icon(::launcher_backup::Resource* icon) {
  delete icon_;
  icon_ = icon;
  if (icon) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.icon)
}

// optional .launcher_backup.Resource preview = 5;
inline bool Widget::has_preview() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Widget::set_has_preview() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Widget::clear_has_preview() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Widget::clear_preview() {
  if (preview_ != NULL) preview_->::launcher_backup::Resource::Clear();
  clear_has_preview();
}
inline const ::launcher_backup::Resource& Widget::preview() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.preview)
  return preview_ != NULL ? *preview_
                         : *::launcher_backup::Resource::internal_default_instance();
}
inline ::launcher_backup::Resource* Widget::mutable_preview() {
  set_has_preview();
  if (preview_ == NULL) {
    preview_ = new ::launcher_backup::Resource;
  }
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.preview)
  return preview_;
}
inline ::launcher_backup::Resource* Widget::release_preview() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.preview)
  clear_has_preview();
  ::launcher_backup::Resource* temp = preview_;
  preview_ = NULL;
  return temp;
}
inline void Widget::set_allocated_preview(::launcher_backup::Resource* preview) {
  delete preview_;
  preview_ = preview;
  if (preview) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.preview)
}

inline const Widget* Widget::internal_default_instance() {
  return &Widget_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace launcher_backup

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::launcher_backup::Key_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::launcher_backup::Key_Type>() {
  return ::launcher_backup::Key_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_backup_2eproto__INCLUDED
