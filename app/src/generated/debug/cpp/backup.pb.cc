// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backup.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "backup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace launcher_backup {

namespace {

const ::google::protobuf::Descriptor* Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Key_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Key_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CheckedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Journal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Journal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Favorite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Favorite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Screen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Screen_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Widget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Widget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_backup_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_backup_2eproto() {
  protobuf_AddDesc_backup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "backup.proto");
  GOOGLE_CHECK(file != NULL);
  Key_descriptor_ = file->message_type(0);
  static const int Key_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, checksum_),
  };
  Key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Key_descriptor_,
      Key::internal_default_instance(),
      Key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _has_bits_),
      -1,
      -1,
      sizeof(Key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Key, _internal_metadata_));
  Key_Type_descriptor_ = Key_descriptor_->enum_type(0);
  CheckedMessage_descriptor_ = file->message_type(1);
  static const int CheckedMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckedMessage, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckedMessage, checksum_),
  };
  CheckedMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckedMessage_descriptor_,
      CheckedMessage::internal_default_instance(),
      CheckedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckedMessage, _has_bits_),
      -1,
      -1,
      sizeof(CheckedMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckedMessage, _internal_metadata_));
  Journal_descriptor_ = file->message_type(2);
  static const int Journal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, app_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, key_),
  };
  Journal_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Journal_descriptor_,
      Journal::internal_default_instance(),
      Journal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, _has_bits_),
      -1,
      -1,
      sizeof(Journal),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Journal, _internal_metadata_));
  Favorite_descriptor_ = file->message_type(3);
  static const int Favorite_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, cellx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, celly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, spanx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, spany_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, displaymode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, appwidgetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, appwidgetprovider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, intent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, icontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, iconpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, iconresource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, icon_),
  };
  Favorite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Favorite_descriptor_,
      Favorite::internal_default_instance(),
      Favorite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, _has_bits_),
      -1,
      -1,
      sizeof(Favorite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Favorite, _internal_metadata_));
  Screen_descriptor_ = file->message_type(4);
  static const int Screen_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, rank_),
  };
  Screen_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Screen_descriptor_,
      Screen::internal_default_instance(),
      Screen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, _has_bits_),
      -1,
      -1,
      sizeof(Screen),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Screen, _internal_metadata_));
  Resource_descriptor_ = file->message_type(5);
  static const int Resource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, dpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, data_),
  };
  Resource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Resource_descriptor_,
      Resource::internal_default_instance(),
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_),
      -1,
      -1,
      sizeof(Resource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _internal_metadata_));
  Widget_descriptor_ = file->message_type(6);
  static const int Widget_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, provider_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, configure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, preview_),
  };
  Widget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Widget_descriptor_,
      Widget::internal_default_instance(),
      Widget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, _has_bits_),
      -1,
      -1,
      sizeof(Widget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_backup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Key_descriptor_, Key::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckedMessage_descriptor_, CheckedMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Journal_descriptor_, Journal::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Favorite_descriptor_, Favorite::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Screen_descriptor_, Screen::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Resource_descriptor_, Resource::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Widget_descriptor_, Widget::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_backup_2eproto() {
  Key_default_instance_.Shutdown();
  delete Key_reflection_;
  CheckedMessage_default_instance_.Shutdown();
  delete CheckedMessage_reflection_;
  Journal_default_instance_.Shutdown();
  delete Journal_reflection_;
  Favorite_default_instance_.Shutdown();
  delete Favorite_reflection_;
  Screen_default_instance_.Shutdown();
  delete Screen_reflection_;
  Resource_default_instance_.Shutdown();
  delete Resource_reflection_;
  Widget_default_instance_.Shutdown();
  delete Widget_reflection_;
}

void protobuf_InitDefaults_backup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Key_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CheckedMessage_default_instance_.DefaultConstruct();
  Journal_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Favorite_default_instance_.DefaultConstruct();
  Screen_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Resource_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Widget_default_instance_.DefaultConstruct();
  Key_default_instance_.get_mutable()->InitAsDefaultInstance();
  CheckedMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  Journal_default_instance_.get_mutable()->InitAsDefaultInstance();
  Favorite_default_instance_.get_mutable()->InitAsDefaultInstance();
  Screen_default_instance_.get_mutable()->InitAsDefaultInstance();
  Resource_default_instance_.get_mutable()->InitAsDefaultInstance();
  Widget_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_backup_2eproto_once_);
void protobuf_InitDefaults_backup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_backup_2eproto_once_,
                 &protobuf_InitDefaults_backup_2eproto_impl);
}
void protobuf_AddDesc_backup_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_backup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014backup.proto\022\017launcher_backup\"\222\001\n\003Key\022"
    "\'\n\004type\030\001 \002(\0162\031.launcher_backup.Key.Type"
    "\022\014\n\004name\030\002 \001(\t\022\n\n\002id\030\003 \001(\003\022\020\n\010checksum\030\004"
    " \001(\003\"6\n\004Type\022\014\n\010FAVORITE\020\001\022\n\n\006SCREEN\020\002\022\010"
    "\n\004ICON\020\003\022\n\n\006WIDGET\020\004\"3\n\016CheckedMessage\022\017"
    "\n\007payload\030\001 \002(\014\022\020\n\010checksum\030\002 \002(\003\"i\n\007Jou"
    "rnal\022\023\n\013app_version\030\001 \002(\005\022\t\n\001t\030\002 \002(\003\022\r\n\005"
    "bytes\030\003 \001(\003\022\014\n\004rows\030\004 \001(\005\022!\n\003key\030\005 \003(\0132\024"
    ".launcher_backup.Key\"\303\002\n\010Favorite\022\n\n\002id\030"
    "\001 \002(\003\022\020\n\010itemType\030\002 \002(\005\022\r\n\005title\030\003 \001(\t\022\021"
    "\n\tcontainer\030\004 \001(\005\022\016\n\006screen\030\005 \001(\005\022\r\n\005cel"
    "lX\030\006 \001(\005\022\r\n\005cellY\030\007 \001(\005\022\r\n\005spanX\030\010 \001(\005\022\r"
    "\n\005spanY\030\t \001(\005\022\023\n\013displayMode\030\n \001(\005\022\023\n\013ap"
    "pWidgetId\030\013 \001(\005\022\031\n\021appWidgetProvider\030\014 \001"
    "(\t\022\016\n\006intent\030\r \001(\t\022\013\n\003uri\030\016 \001(\t\022\020\n\010iconT"
    "ype\030\017 \001(\005\022\023\n\013iconPackage\030\020 \001(\t\022\024\n\014iconRe"
    "source\030\021 \001(\t\022\014\n\004icon\030\022 \001(\014\"\"\n\006Screen\022\n\n\002"
    "id\030\001 \002(\003\022\014\n\004rank\030\002 \001(\005\"%\n\010Resource\022\013\n\003dp"
    "i\030\001 \002(\005\022\014\n\004data\030\002 \002(\014\"\221\001\n\006Widget\022\020\n\010prov"
    "ider\030\001 \002(\t\022\r\n\005label\030\002 \001(\t\022\021\n\tconfigure\030\003"
    " \001(\010\022\'\n\004icon\030\004 \001(\0132\031.launcher_backup.Res"
    "ource\022*\n\007preview\030\005 \001(\0132\031.launcher_backup"
    ".ResourceB,\n\034com.android.launcher3.backu"
    "pB\014BackupProtos", 935);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "backup.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_backup_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_backup_2eproto_once_);
void protobuf_AddDesc_backup_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_backup_2eproto_once_,
                 &protobuf_AddDesc_backup_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_backup_2eproto {
  StaticDescriptorInitializer_backup_2eproto() {
    protobuf_AddDesc_backup_2eproto();
  }
} static_descriptor_initializer_backup_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Key_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_Type_descriptor_;
}
bool Key_Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Key_Type Key::FAVORITE;
const Key_Type Key::SCREEN;
const Key_Type Key::ICON;
const Key_Type Key::WIDGET;
const Key_Type Key::Type_MIN;
const Key_Type Key::Type_MAX;
const int Key::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Key::kTypeFieldNumber;
const int Key::kNameFieldNumber;
const int Key::kIdFieldNumber;
const int Key::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Key::Key()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.Key)
}

void Key::InitAsDefaultInstance() {
}

Key::Key(const Key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.Key)
}

void Key::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&checksum_) -
    reinterpret_cast<char*>(&id_) + sizeof(checksum_));
  type_ = 1;
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:launcher_backup.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Key_descriptor_;
}

const Key& Key::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Key> Key_default_instance_;

Key* Key::New(::google::protobuf::Arena* arena) const {
  Key* n = new Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.Key)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Key, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Key*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(id_, checksum_);
    type_ = 1;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .launcher_backup.Key.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::launcher_backup::Key_Type_IsValid(value)) {
            set_type(static_cast< ::launcher_backup::Key_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Key.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_checksum;
        break;
      }

      // optional int64 checksum = 4;
      case 4: {
        if (tag == 32) {
         parse_checksum:
          set_has_checksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.Key)
  return false;
#undef DO_
}

void Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.Key)
  // required .launcher_backup.Key.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Key.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  // optional int64 checksum = 4;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->checksum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.Key)
}

::google::protobuf::uint8* Key::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.Key)
  // required .launcher_backup.Key.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Key.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  // optional int64 checksum = 4;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->checksum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.Key)
  size_t total_size = 0;

  // required .launcher_backup.Key.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 checksum = 4;
    if (has_checksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->checksum());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Key::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.Key)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Key* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Key>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.Key)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.Key)
    UnsafeMergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.Key)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Key::UnsafeMergeFrom(const Key& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Key::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.Key)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Key::Swap(Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Key::InternalSwap(Key* other) {
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(checksum_, other->checksum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Key_descriptor_;
  metadata.reflection = Key_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// required .launcher_backup.Key.Type type = 1;
bool Key::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Key::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Key::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Key::clear_type() {
  type_ = 1;
  clear_has_type();
}
::launcher_backup::Key_Type Key::type() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.type)
  return static_cast< ::launcher_backup::Key_Type >(type_);
}
void Key::set_type(::launcher_backup::Key_Type value) {
  assert(::launcher_backup::Key_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Key.type)
}

// optional string name = 2;
bool Key::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Key::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Key::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Key::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Key::name() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Key::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Key.name)
}
void Key::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Key.name)
}
void Key::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Key.name)
}
::std::string* Key::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Key.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Key::release_name() {
  // @@protoc_insertion_point(field_release:launcher_backup.Key.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Key::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Key.name)
}

// optional int64 id = 3;
bool Key::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Key::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Key::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Key::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 Key::id() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.id)
  return id_;
}
void Key::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Key.id)
}

// optional int64 checksum = 4;
bool Key::has_checksum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Key::set_has_checksum() {
  _has_bits_[0] |= 0x00000008u;
}
void Key::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000008u;
}
void Key::clear_checksum() {
  checksum_ = GOOGLE_LONGLONG(0);
  clear_has_checksum();
}
::google::protobuf::int64 Key::checksum() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Key.checksum)
  return checksum_;
}
void Key::set_checksum(::google::protobuf::int64 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Key.checksum)
}

inline const Key* Key::internal_default_instance() {
  return &Key_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckedMessage::kPayloadFieldNumber;
const int CheckedMessage::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckedMessage::CheckedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.CheckedMessage)
}

void CheckedMessage::InitAsDefaultInstance() {
}

CheckedMessage::CheckedMessage(const CheckedMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.CheckedMessage)
}

void CheckedMessage::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_ = GOOGLE_LONGLONG(0);
}

CheckedMessage::~CheckedMessage() {
  // @@protoc_insertion_point(destructor:launcher_backup.CheckedMessage)
  SharedDtor();
}

void CheckedMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckedMessage_descriptor_;
}

const CheckedMessage& CheckedMessage::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CheckedMessage> CheckedMessage_default_instance_;

CheckedMessage* CheckedMessage::New(::google::protobuf::Arena* arena) const {
  CheckedMessage* n = new CheckedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.CheckedMessage)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    checksum_ = GOOGLE_LONGLONG(0);
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CheckedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.CheckedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes payload = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checksum;
        break;
      }

      // required int64 checksum = 2;
      case 2: {
        if (tag == 16) {
         parse_checksum:
          set_has_checksum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &checksum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.CheckedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.CheckedMessage)
  return false;
#undef DO_
}

void CheckedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.CheckedMessage)
  // required bytes payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->payload(), output);
  }

  // required int64 checksum = 2;
  if (has_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->checksum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.CheckedMessage)
}

::google::protobuf::uint8* CheckedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.CheckedMessage)
  // required bytes payload = 1;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }

  // required int64 checksum = 2;
  if (has_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->checksum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.CheckedMessage)
  return target;
}

size_t CheckedMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:launcher_backup.CheckedMessage)
  size_t total_size = 0;

  if (has_payload()) {
    // required bytes payload = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  if (has_checksum()) {
    // required int64 checksum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->checksum());
  }

  return total_size;
}
size_t CheckedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.CheckedMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes payload = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

    // required int64 checksum = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->checksum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.CheckedMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CheckedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.CheckedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.CheckedMessage)
    UnsafeMergeFrom(*source);
  }
}

void CheckedMessage::MergeFrom(const CheckedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.CheckedMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CheckedMessage::UnsafeMergeFrom(const CheckedMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (from.has_checksum()) {
      set_checksum(from.checksum());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void CheckedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.CheckedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckedMessage::CopyFrom(const CheckedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.CheckedMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CheckedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckedMessage::Swap(CheckedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckedMessage::InternalSwap(CheckedMessage* other) {
  payload_.Swap(&other->payload_);
  std::swap(checksum_, other->checksum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckedMessage_descriptor_;
  metadata.reflection = CheckedMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckedMessage

// required bytes payload = 1;
bool CheckedMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckedMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckedMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckedMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& CheckedMessage::payload() const {
  // @@protoc_insertion_point(field_get:launcher_backup.CheckedMessage.payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckedMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.CheckedMessage.payload)
}
void CheckedMessage::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.CheckedMessage.payload)
}
void CheckedMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.CheckedMessage.payload)
}
::std::string* CheckedMessage::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:launcher_backup.CheckedMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckedMessage::release_payload() {
  // @@protoc_insertion_point(field_release:launcher_backup.CheckedMessage.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckedMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.CheckedMessage.payload)
}

// required int64 checksum = 2;
bool CheckedMessage::has_checksum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckedMessage::set_has_checksum() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckedMessage::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckedMessage::clear_checksum() {
  checksum_ = GOOGLE_LONGLONG(0);
  clear_has_checksum();
}
::google::protobuf::int64 CheckedMessage::checksum() const {
  // @@protoc_insertion_point(field_get:launcher_backup.CheckedMessage.checksum)
  return checksum_;
}
void CheckedMessage::set_checksum(::google::protobuf::int64 value) {
  set_has_checksum();
  checksum_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.CheckedMessage.checksum)
}

inline const CheckedMessage* CheckedMessage::internal_default_instance() {
  return &CheckedMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Journal::kAppVersionFieldNumber;
const int Journal::kTFieldNumber;
const int Journal::kBytesFieldNumber;
const int Journal::kRowsFieldNumber;
const int Journal::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Journal::Journal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.Journal)
}

void Journal::InitAsDefaultInstance() {
}

Journal::Journal(const Journal& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.Journal)
}

void Journal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&t_, 0, reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&t_) + sizeof(bytes_));
}

Journal::~Journal() {
  // @@protoc_insertion_point(destructor:launcher_backup.Journal)
  SharedDtor();
}

void Journal::SharedDtor() {
}

void Journal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Journal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Journal_descriptor_;
}

const Journal& Journal::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Journal> Journal_default_instance_;

Journal* Journal::New(::google::protobuf::Arena* arena) const {
  Journal* n = new Journal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Journal::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.Journal)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Journal, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Journal*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(t_, bytes_);

#undef ZR_HELPER_
#undef ZR_

  key_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Journal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.Journal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 app_version = 1;
      case 1: {
        if (tag == 8) {
          set_has_app_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_t;
        break;
      }

      // required int64 t = 2;
      case 2: {
        if (tag == 16) {
         parse_t:
          set_has_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bytes;
        break;
      }

      // optional int64 bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_bytes:
          set_has_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rows;
        break;
      }

      // optional int32 rows = 4;
      case 4: {
        if (tag == 32) {
         parse_rows:
          set_has_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rows_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // repeated .launcher_backup.Key key = 5;
      case 5: {
        if (tag == 42) {
         parse_key:
          DO_(input->IncrementRecursionDepth());
         parse_loop_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_key;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.Journal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.Journal)
  return false;
#undef DO_
}

void Journal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.Journal)
  // required int32 app_version = 1;
  if (has_app_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->app_version(), output);
  }

  // required int64 t = 2;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t(), output);
  }

  // optional int64 bytes = 3;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->bytes(), output);
  }

  // optional int32 rows = 4;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rows(), output);
  }

  // repeated .launcher_backup.Key key = 5;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->key(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.Journal)
}

::google::protobuf::uint8* Journal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.Journal)
  // required int32 app_version = 1;
  if (has_app_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->app_version(), target);
  }

  // required int64 t = 2;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t(), target);
  }

  // optional int64 bytes = 3;
  if (has_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->bytes(), target);
  }

  // optional int32 rows = 4;
  if (has_rows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rows(), target);
  }

  // repeated .launcher_backup.Key key = 5;
  for (unsigned int i = 0, n = this->key_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->key(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.Journal)
  return target;
}

size_t Journal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:launcher_backup.Journal)
  size_t total_size = 0;

  if (has_app_version()) {
    // required int32 app_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->app_version());
  }

  if (has_t()) {
    // required int64 t = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t());
  }

  return total_size;
}
size_t Journal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.Journal)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 app_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->app_version());

    // required int64 t = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional int64 bytes = 3;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bytes());
    }

    // optional int32 rows = 4;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rows());
    }

  }
  // repeated .launcher_backup.Key key = 5;
  {
    unsigned int count = this->key_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Journal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.Journal)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Journal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Journal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.Journal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.Journal)
    UnsafeMergeFrom(*source);
  }
}

void Journal::MergeFrom(const Journal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.Journal)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Journal::UnsafeMergeFrom(const Journal& from) {
  GOOGLE_DCHECK(&from != this);
  key_.MergeFrom(from.key_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_version()) {
      set_app_version(from.app_version());
    }
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_rows()) {
      set_rows(from.rows());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Journal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.Journal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Journal::CopyFrom(const Journal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.Journal)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Journal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->key())) return false;
  return true;
}

void Journal::Swap(Journal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Journal::InternalSwap(Journal* other) {
  std::swap(app_version_, other->app_version_);
  std::swap(t_, other->t_);
  std::swap(bytes_, other->bytes_);
  std::swap(rows_, other->rows_);
  key_.UnsafeArenaSwap(&other->key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Journal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Journal_descriptor_;
  metadata.reflection = Journal_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Journal

// required int32 app_version = 1;
bool Journal::has_app_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Journal::set_has_app_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Journal::clear_has_app_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Journal::clear_app_version() {
  app_version_ = 0;
  clear_has_app_version();
}
::google::protobuf::int32 Journal::app_version() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.app_version)
  return app_version_;
}
void Journal::set_app_version(::google::protobuf::int32 value) {
  set_has_app_version();
  app_version_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.app_version)
}

// required int64 t = 2;
bool Journal::has_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Journal::set_has_t() {
  _has_bits_[0] |= 0x00000002u;
}
void Journal::clear_has_t() {
  _has_bits_[0] &= ~0x00000002u;
}
void Journal::clear_t() {
  t_ = GOOGLE_LONGLONG(0);
  clear_has_t();
}
::google::protobuf::int64 Journal::t() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.t)
  return t_;
}
void Journal::set_t(::google::protobuf::int64 value) {
  set_has_t();
  t_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.t)
}

// optional int64 bytes = 3;
bool Journal::has_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Journal::set_has_bytes() {
  _has_bits_[0] |= 0x00000004u;
}
void Journal::clear_has_bytes() {
  _has_bits_[0] &= ~0x00000004u;
}
void Journal::clear_bytes() {
  bytes_ = GOOGLE_LONGLONG(0);
  clear_has_bytes();
}
::google::protobuf::int64 Journal::bytes() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.bytes)
  return bytes_;
}
void Journal::set_bytes(::google::protobuf::int64 value) {
  set_has_bytes();
  bytes_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.bytes)
}

// optional int32 rows = 4;
bool Journal::has_rows() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Journal::set_has_rows() {
  _has_bits_[0] |= 0x00000008u;
}
void Journal::clear_has_rows() {
  _has_bits_[0] &= ~0x00000008u;
}
void Journal::clear_rows() {
  rows_ = 0;
  clear_has_rows();
}
::google::protobuf::int32 Journal::rows() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.rows)
  return rows_;
}
void Journal::set_rows(::google::protobuf::int32 value) {
  set_has_rows();
  rows_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Journal.rows)
}

// repeated .launcher_backup.Key key = 5;
int Journal::key_size() const {
  return key_.size();
}
void Journal::clear_key() {
  key_.Clear();
}
const ::launcher_backup::Key& Journal::key(int index) const {
  // @@protoc_insertion_point(field_get:launcher_backup.Journal.key)
  return key_.Get(index);
}
::launcher_backup::Key* Journal::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:launcher_backup.Journal.key)
  return key_.Mutable(index);
}
::launcher_backup::Key* Journal::add_key() {
  // @@protoc_insertion_point(field_add:launcher_backup.Journal.key)
  return key_.Add();
}
::google::protobuf::RepeatedPtrField< ::launcher_backup::Key >*
Journal::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:launcher_backup.Journal.key)
  return &key_;
}
const ::google::protobuf::RepeatedPtrField< ::launcher_backup::Key >&
Journal::key() const {
  // @@protoc_insertion_point(field_list:launcher_backup.Journal.key)
  return key_;
}

inline const Journal* Journal::internal_default_instance() {
  return &Journal_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Favorite::kIdFieldNumber;
const int Favorite::kItemTypeFieldNumber;
const int Favorite::kTitleFieldNumber;
const int Favorite::kContainerFieldNumber;
const int Favorite::kScreenFieldNumber;
const int Favorite::kCellXFieldNumber;
const int Favorite::kCellYFieldNumber;
const int Favorite::kSpanXFieldNumber;
const int Favorite::kSpanYFieldNumber;
const int Favorite::kDisplayModeFieldNumber;
const int Favorite::kAppWidgetIdFieldNumber;
const int Favorite::kAppWidgetProviderFieldNumber;
const int Favorite::kIntentFieldNumber;
const int Favorite::kUriFieldNumber;
const int Favorite::kIconTypeFieldNumber;
const int Favorite::kIconPackageFieldNumber;
const int Favorite::kIconResourceFieldNumber;
const int Favorite::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Favorite::Favorite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.Favorite)
}

void Favorite::InitAsDefaultInstance() {
}

Favorite::Favorite(const Favorite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.Favorite)
}

void Favorite::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appwidgetprovider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  intent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconpackage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconresource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&icontype_) -
    reinterpret_cast<char*>(&id_) + sizeof(icontype_));
}

Favorite::~Favorite() {
  // @@protoc_insertion_point(destructor:launcher_backup.Favorite)
  SharedDtor();
}

void Favorite::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appwidgetprovider_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  intent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconpackage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iconresource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Favorite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Favorite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Favorite_descriptor_;
}

const Favorite& Favorite::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Favorite> Favorite_default_instance_;

Favorite* Favorite::New(::google::protobuf::Arena* arena) const {
  Favorite* n = new Favorite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Favorite::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.Favorite)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Favorite, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Favorite*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, spanx_);
    if (has_title()) {
      title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(spany_, icontype_);
    if (has_appwidgetprovider()) {
      appwidgetprovider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_intent()) {
      intent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uri()) {
      uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_iconpackage()) {
      iconpackage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 196608u) {
    if (has_iconresource()) {
      iconresource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_icon()) {
      icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Favorite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.Favorite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemType;
        break;
      }

      // required int32 itemType = 2;
      case 2: {
        if (tag == 16) {
         parse_itemType:
          set_has_itemtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemtype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (tag == 26) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Favorite.title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_container;
        break;
      }

      // optional int32 container = 4;
      case 4: {
        if (tag == 32) {
         parse_container:
          set_has_container();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_screen;
        break;
      }

      // optional int32 screen = 5;
      case 5: {
        if (tag == 40) {
         parse_screen:
          set_has_screen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cellX;
        break;
      }

      // optional int32 cellX = 6;
      case 6: {
        if (tag == 48) {
         parse_cellX:
          set_has_cellx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cellY;
        break;
      }

      // optional int32 cellY = 7;
      case 7: {
        if (tag == 56) {
         parse_cellY:
          set_has_celly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &celly_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_spanX;
        break;
      }

      // optional int32 spanX = 8;
      case 8: {
        if (tag == 64) {
         parse_spanX:
          set_has_spanx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spanx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_spanY;
        break;
      }

      // optional int32 spanY = 9;
      case 9: {
        if (tag == 72) {
         parse_spanY:
          set_has_spany();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spany_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_displayMode;
        break;
      }

      // optional int32 displayMode = 10;
      case 10: {
        if (tag == 80) {
         parse_displayMode:
          set_has_displaymode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displaymode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_appWidgetId;
        break;
      }

      // optional int32 appWidgetId = 11;
      case 11: {
        if (tag == 88) {
         parse_appWidgetId:
          set_has_appwidgetid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appwidgetid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_appWidgetProvider;
        break;
      }

      // optional string appWidgetProvider = 12;
      case 12: {
        if (tag == 98) {
         parse_appWidgetProvider:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appwidgetprovider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->appwidgetprovider().data(), this->appwidgetprovider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Favorite.appWidgetProvider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_intent;
        break;
      }

      // optional string intent = 13;
      case 13: {
        if (tag == 106) {
         parse_intent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->intent().data(), this->intent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Favorite.intent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_uri;
        break;
      }

      // optional string uri = 14;
      case 14: {
        if (tag == 114) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Favorite.uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_iconType;
        break;
      }

      // optional int32 iconType = 15;
      case 15: {
        if (tag == 120) {
         parse_iconType:
          set_has_icontype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icontype_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_iconPackage;
        break;
      }

      // optional string iconPackage = 16;
      case 16: {
        if (tag == 130) {
         parse_iconPackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconpackage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconpackage().data(), this->iconpackage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Favorite.iconPackage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_iconResource;
        break;
      }

      // optional string iconResource = 17;
      case 17: {
        if (tag == 138) {
         parse_iconResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconresource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->iconresource().data(), this->iconresource().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Favorite.iconResource");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_icon;
        break;
      }

      // optional bytes icon = 18;
      case 18: {
        if (tag == 146) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.Favorite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.Favorite)
  return false;
#undef DO_
}

void Favorite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.Favorite)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 itemType = 2;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemtype(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->title(), output);
  }

  // optional int32 container = 4;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->container(), output);
  }

  // optional int32 screen = 5;
  if (has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->screen(), output);
  }

  // optional int32 cellX = 6;
  if (has_cellx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cellx(), output);
  }

  // optional int32 cellY = 7;
  if (has_celly()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->celly(), output);
  }

  // optional int32 spanX = 8;
  if (has_spanx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spanx(), output);
  }

  // optional int32 spanY = 9;
  if (has_spany()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->spany(), output);
  }

  // optional int32 displayMode = 10;
  if (has_displaymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->displaymode(), output);
  }

  // optional int32 appWidgetId = 11;
  if (has_appwidgetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->appwidgetid(), output);
  }

  // optional string appWidgetProvider = 12;
  if (has_appwidgetprovider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appwidgetprovider().data(), this->appwidgetprovider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.appWidgetProvider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->appwidgetprovider(), output);
  }

  // optional string intent = 13;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->intent().data(), this->intent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.intent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->intent(), output);
  }

  // optional string uri = 14;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->uri(), output);
  }

  // optional int32 iconType = 15;
  if (has_icontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->icontype(), output);
  }

  // optional string iconPackage = 16;
  if (has_iconpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconpackage().data(), this->iconpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.iconPackage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->iconpackage(), output);
  }

  // optional string iconResource = 17;
  if (has_iconresource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconresource().data(), this->iconresource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.iconResource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->iconresource(), output);
  }

  // optional bytes icon = 18;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.Favorite)
}

::google::protobuf::uint8* Favorite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.Favorite)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 itemType = 2;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemtype(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional int32 container = 4;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->container(), target);
  }

  // optional int32 screen = 5;
  if (has_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->screen(), target);
  }

  // optional int32 cellX = 6;
  if (has_cellx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cellx(), target);
  }

  // optional int32 cellY = 7;
  if (has_celly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->celly(), target);
  }

  // optional int32 spanX = 8;
  if (has_spanx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spanx(), target);
  }

  // optional int32 spanY = 9;
  if (has_spany()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->spany(), target);
  }

  // optional int32 displayMode = 10;
  if (has_displaymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->displaymode(), target);
  }

  // optional int32 appWidgetId = 11;
  if (has_appwidgetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->appwidgetid(), target);
  }

  // optional string appWidgetProvider = 12;
  if (has_appwidgetprovider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->appwidgetprovider().data(), this->appwidgetprovider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.appWidgetProvider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->appwidgetprovider(), target);
  }

  // optional string intent = 13;
  if (has_intent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->intent().data(), this->intent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.intent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->intent(), target);
  }

  // optional string uri = 14;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->uri(), target);
  }

  // optional int32 iconType = 15;
  if (has_icontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->icontype(), target);
  }

  // optional string iconPackage = 16;
  if (has_iconpackage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconpackage().data(), this->iconpackage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.iconPackage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->iconpackage(), target);
  }

  // optional string iconResource = 17;
  if (has_iconresource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->iconresource().data(), this->iconresource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Favorite.iconResource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->iconresource(), target);
  }

  // optional bytes icon = 18;
  if (has_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.Favorite)
  return target;
}

size_t Favorite::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:launcher_backup.Favorite)
  size_t total_size = 0;

  if (has_id()) {
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_itemtype()) {
    // required int32 itemType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemtype());
  }

  return total_size;
}
size_t Favorite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.Favorite)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 itemType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 252u) {
    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 container = 4;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // optional int32 screen = 5;
    if (has_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->screen());
    }

    // optional int32 cellX = 6;
    if (has_cellx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellx());
    }

    // optional int32 cellY = 7;
    if (has_celly()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->celly());
    }

    // optional int32 spanX = 8;
    if (has_spanx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spanx());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 spanY = 9;
    if (has_spany()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spany());
    }

    // optional int32 displayMode = 10;
    if (has_displaymode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displaymode());
    }

    // optional int32 appWidgetId = 11;
    if (has_appwidgetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appwidgetid());
    }

    // optional string appWidgetProvider = 12;
    if (has_appwidgetprovider()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appwidgetprovider());
    }

    // optional string intent = 13;
    if (has_intent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->intent());
    }

    // optional string uri = 14;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional int32 iconType = 15;
    if (has_icontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icontype());
    }

    // optional string iconPackage = 16;
    if (has_iconpackage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconpackage());
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional string iconResource = 17;
    if (has_iconresource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconresource());
    }

    // optional bytes icon = 18;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Favorite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.Favorite)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Favorite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Favorite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.Favorite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.Favorite)
    UnsafeMergeFrom(*source);
  }
}

void Favorite::MergeFrom(const Favorite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.Favorite)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Favorite::UnsafeMergeFrom(const Favorite& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_title()) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_screen()) {
      set_screen(from.screen());
    }
    if (from.has_cellx()) {
      set_cellx(from.cellx());
    }
    if (from.has_celly()) {
      set_celly(from.celly());
    }
    if (from.has_spanx()) {
      set_spanx(from.spanx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_spany()) {
      set_spany(from.spany());
    }
    if (from.has_displaymode()) {
      set_displaymode(from.displaymode());
    }
    if (from.has_appwidgetid()) {
      set_appwidgetid(from.appwidgetid());
    }
    if (from.has_appwidgetprovider()) {
      set_has_appwidgetprovider();
      appwidgetprovider_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appwidgetprovider_);
    }
    if (from.has_intent()) {
      set_has_intent();
      intent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.intent_);
    }
    if (from.has_uri()) {
      set_has_uri();
      uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uri_);
    }
    if (from.has_icontype()) {
      set_icontype(from.icontype());
    }
    if (from.has_iconpackage()) {
      set_has_iconpackage();
      iconpackage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconpackage_);
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iconresource()) {
      set_has_iconresource();
      iconresource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iconresource_);
    }
    if (from.has_icon()) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Favorite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.Favorite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Favorite::CopyFrom(const Favorite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.Favorite)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Favorite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Favorite::Swap(Favorite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Favorite::InternalSwap(Favorite* other) {
  std::swap(id_, other->id_);
  std::swap(itemtype_, other->itemtype_);
  title_.Swap(&other->title_);
  std::swap(container_, other->container_);
  std::swap(screen_, other->screen_);
  std::swap(cellx_, other->cellx_);
  std::swap(celly_, other->celly_);
  std::swap(spanx_, other->spanx_);
  std::swap(spany_, other->spany_);
  std::swap(displaymode_, other->displaymode_);
  std::swap(appwidgetid_, other->appwidgetid_);
  appwidgetprovider_.Swap(&other->appwidgetprovider_);
  intent_.Swap(&other->intent_);
  uri_.Swap(&other->uri_);
  std::swap(icontype_, other->icontype_);
  iconpackage_.Swap(&other->iconpackage_);
  iconresource_.Swap(&other->iconresource_);
  icon_.Swap(&other->icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Favorite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Favorite_descriptor_;
  metadata.reflection = Favorite_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Favorite

// required int64 id = 1;
bool Favorite::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Favorite::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Favorite::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Favorite::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 Favorite::id() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.id)
  return id_;
}
void Favorite::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.id)
}

// required int32 itemType = 2;
bool Favorite::has_itemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Favorite::set_has_itemtype() {
  _has_bits_[0] |= 0x00000002u;
}
void Favorite::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void Favorite::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
::google::protobuf::int32 Favorite::itemtype() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.itemType)
  return itemtype_;
}
void Favorite::set_itemtype(::google::protobuf::int32 value) {
  set_has_itemtype();
  itemtype_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.itemType)
}

// optional string title = 3;
bool Favorite::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Favorite::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
void Favorite::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
void Favorite::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& Favorite::title() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.title)
  return title_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.title)
}
void Favorite::set_title(const char* value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.title)
}
void Favorite::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.title)
}
::std::string* Favorite::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_title() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.title)
}

// optional int32 container = 4;
bool Favorite::has_container() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Favorite::set_has_container() {
  _has_bits_[0] |= 0x00000008u;
}
void Favorite::clear_has_container() {
  _has_bits_[0] &= ~0x00000008u;
}
void Favorite::clear_container() {
  container_ = 0;
  clear_has_container();
}
::google::protobuf::int32 Favorite::container() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.container)
  return container_;
}
void Favorite::set_container(::google::protobuf::int32 value) {
  set_has_container();
  container_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.container)
}

// optional int32 screen = 5;
bool Favorite::has_screen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Favorite::set_has_screen() {
  _has_bits_[0] |= 0x00000010u;
}
void Favorite::clear_has_screen() {
  _has_bits_[0] &= ~0x00000010u;
}
void Favorite::clear_screen() {
  screen_ = 0;
  clear_has_screen();
}
::google::protobuf::int32 Favorite::screen() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.screen)
  return screen_;
}
void Favorite::set_screen(::google::protobuf::int32 value) {
  set_has_screen();
  screen_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.screen)
}

// optional int32 cellX = 6;
bool Favorite::has_cellx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Favorite::set_has_cellx() {
  _has_bits_[0] |= 0x00000020u;
}
void Favorite::clear_has_cellx() {
  _has_bits_[0] &= ~0x00000020u;
}
void Favorite::clear_cellx() {
  cellx_ = 0;
  clear_has_cellx();
}
::google::protobuf::int32 Favorite::cellx() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.cellX)
  return cellx_;
}
void Favorite::set_cellx(::google::protobuf::int32 value) {
  set_has_cellx();
  cellx_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.cellX)
}

// optional int32 cellY = 7;
bool Favorite::has_celly() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Favorite::set_has_celly() {
  _has_bits_[0] |= 0x00000040u;
}
void Favorite::clear_has_celly() {
  _has_bits_[0] &= ~0x00000040u;
}
void Favorite::clear_celly() {
  celly_ = 0;
  clear_has_celly();
}
::google::protobuf::int32 Favorite::celly() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.cellY)
  return celly_;
}
void Favorite::set_celly(::google::protobuf::int32 value) {
  set_has_celly();
  celly_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.cellY)
}

// optional int32 spanX = 8;
bool Favorite::has_spanx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Favorite::set_has_spanx() {
  _has_bits_[0] |= 0x00000080u;
}
void Favorite::clear_has_spanx() {
  _has_bits_[0] &= ~0x00000080u;
}
void Favorite::clear_spanx() {
  spanx_ = 0;
  clear_has_spanx();
}
::google::protobuf::int32 Favorite::spanx() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.spanX)
  return spanx_;
}
void Favorite::set_spanx(::google::protobuf::int32 value) {
  set_has_spanx();
  spanx_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.spanX)
}

// optional int32 spanY = 9;
bool Favorite::has_spany() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Favorite::set_has_spany() {
  _has_bits_[0] |= 0x00000100u;
}
void Favorite::clear_has_spany() {
  _has_bits_[0] &= ~0x00000100u;
}
void Favorite::clear_spany() {
  spany_ = 0;
  clear_has_spany();
}
::google::protobuf::int32 Favorite::spany() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.spanY)
  return spany_;
}
void Favorite::set_spany(::google::protobuf::int32 value) {
  set_has_spany();
  spany_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.spanY)
}

// optional int32 displayMode = 10;
bool Favorite::has_displaymode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Favorite::set_has_displaymode() {
  _has_bits_[0] |= 0x00000200u;
}
void Favorite::clear_has_displaymode() {
  _has_bits_[0] &= ~0x00000200u;
}
void Favorite::clear_displaymode() {
  displaymode_ = 0;
  clear_has_displaymode();
}
::google::protobuf::int32 Favorite::displaymode() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.displayMode)
  return displaymode_;
}
void Favorite::set_displaymode(::google::protobuf::int32 value) {
  set_has_displaymode();
  displaymode_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.displayMode)
}

// optional int32 appWidgetId = 11;
bool Favorite::has_appwidgetid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Favorite::set_has_appwidgetid() {
  _has_bits_[0] |= 0x00000400u;
}
void Favorite::clear_has_appwidgetid() {
  _has_bits_[0] &= ~0x00000400u;
}
void Favorite::clear_appwidgetid() {
  appwidgetid_ = 0;
  clear_has_appwidgetid();
}
::google::protobuf::int32 Favorite::appwidgetid() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.appWidgetId)
  return appwidgetid_;
}
void Favorite::set_appwidgetid(::google::protobuf::int32 value) {
  set_has_appwidgetid();
  appwidgetid_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.appWidgetId)
}

// optional string appWidgetProvider = 12;
bool Favorite::has_appwidgetprovider() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Favorite::set_has_appwidgetprovider() {
  _has_bits_[0] |= 0x00000800u;
}
void Favorite::clear_has_appwidgetprovider() {
  _has_bits_[0] &= ~0x00000800u;
}
void Favorite::clear_appwidgetprovider() {
  appwidgetprovider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_appwidgetprovider();
}
const ::std::string& Favorite::appwidgetprovider() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.appWidgetProvider)
  return appwidgetprovider_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_appwidgetprovider(const ::std::string& value) {
  set_has_appwidgetprovider();
  appwidgetprovider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.appWidgetProvider)
}
void Favorite::set_appwidgetprovider(const char* value) {
  set_has_appwidgetprovider();
  appwidgetprovider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.appWidgetProvider)
}
void Favorite::set_appwidgetprovider(const char* value, size_t size) {
  set_has_appwidgetprovider();
  appwidgetprovider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.appWidgetProvider)
}
::std::string* Favorite::mutable_appwidgetprovider() {
  set_has_appwidgetprovider();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.appWidgetProvider)
  return appwidgetprovider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_appwidgetprovider() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.appWidgetProvider)
  clear_has_appwidgetprovider();
  return appwidgetprovider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_appwidgetprovider(::std::string* appwidgetprovider) {
  if (appwidgetprovider != NULL) {
    set_has_appwidgetprovider();
  } else {
    clear_has_appwidgetprovider();
  }
  appwidgetprovider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appwidgetprovider);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.appWidgetProvider)
}

// optional string intent = 13;
bool Favorite::has_intent() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Favorite::set_has_intent() {
  _has_bits_[0] |= 0x00001000u;
}
void Favorite::clear_has_intent() {
  _has_bits_[0] &= ~0x00001000u;
}
void Favorite::clear_intent() {
  intent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_intent();
}
const ::std::string& Favorite::intent() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.intent)
  return intent_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_intent(const ::std::string& value) {
  set_has_intent();
  intent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.intent)
}
void Favorite::set_intent(const char* value) {
  set_has_intent();
  intent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.intent)
}
void Favorite::set_intent(const char* value, size_t size) {
  set_has_intent();
  intent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.intent)
}
::std::string* Favorite::mutable_intent() {
  set_has_intent();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.intent)
  return intent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_intent() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.intent)
  clear_has_intent();
  return intent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_intent(::std::string* intent) {
  if (intent != NULL) {
    set_has_intent();
  } else {
    clear_has_intent();
  }
  intent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intent);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.intent)
}

// optional string uri = 14;
bool Favorite::has_uri() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Favorite::set_has_uri() {
  _has_bits_[0] |= 0x00002000u;
}
void Favorite::clear_has_uri() {
  _has_bits_[0] &= ~0x00002000u;
}
void Favorite::clear_uri() {
  uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uri();
}
const ::std::string& Favorite::uri() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.uri)
  return uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_uri(const ::std::string& value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.uri)
}
void Favorite::set_uri(const char* value) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.uri)
}
void Favorite::set_uri(const char* value, size_t size) {
  set_has_uri();
  uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.uri)
}
::std::string* Favorite::mutable_uri() {
  set_has_uri();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.uri)
  return uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_uri() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.uri)
  clear_has_uri();
  return uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_uri(::std::string* uri) {
  if (uri != NULL) {
    set_has_uri();
  } else {
    clear_has_uri();
  }
  uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.uri)
}

// optional int32 iconType = 15;
bool Favorite::has_icontype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Favorite::set_has_icontype() {
  _has_bits_[0] |= 0x00004000u;
}
void Favorite::clear_has_icontype() {
  _has_bits_[0] &= ~0x00004000u;
}
void Favorite::clear_icontype() {
  icontype_ = 0;
  clear_has_icontype();
}
::google::protobuf::int32 Favorite::icontype() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.iconType)
  return icontype_;
}
void Favorite::set_icontype(::google::protobuf::int32 value) {
  set_has_icontype();
  icontype_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.iconType)
}

// optional string iconPackage = 16;
bool Favorite::has_iconpackage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Favorite::set_has_iconpackage() {
  _has_bits_[0] |= 0x00008000u;
}
void Favorite::clear_has_iconpackage() {
  _has_bits_[0] &= ~0x00008000u;
}
void Favorite::clear_iconpackage() {
  iconpackage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconpackage();
}
const ::std::string& Favorite::iconpackage() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.iconPackage)
  return iconpackage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_iconpackage(const ::std::string& value) {
  set_has_iconpackage();
  iconpackage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.iconPackage)
}
void Favorite::set_iconpackage(const char* value) {
  set_has_iconpackage();
  iconpackage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.iconPackage)
}
void Favorite::set_iconpackage(const char* value, size_t size) {
  set_has_iconpackage();
  iconpackage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.iconPackage)
}
::std::string* Favorite::mutable_iconpackage() {
  set_has_iconpackage();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.iconPackage)
  return iconpackage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_iconpackage() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.iconPackage)
  clear_has_iconpackage();
  return iconpackage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_iconpackage(::std::string* iconpackage) {
  if (iconpackage != NULL) {
    set_has_iconpackage();
  } else {
    clear_has_iconpackage();
  }
  iconpackage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconpackage);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.iconPackage)
}

// optional string iconResource = 17;
bool Favorite::has_iconresource() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Favorite::set_has_iconresource() {
  _has_bits_[0] |= 0x00010000u;
}
void Favorite::clear_has_iconresource() {
  _has_bits_[0] &= ~0x00010000u;
}
void Favorite::clear_iconresource() {
  iconresource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_iconresource();
}
const ::std::string& Favorite::iconresource() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.iconResource)
  return iconresource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_iconresource(const ::std::string& value) {
  set_has_iconresource();
  iconresource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.iconResource)
}
void Favorite::set_iconresource(const char* value) {
  set_has_iconresource();
  iconresource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.iconResource)
}
void Favorite::set_iconresource(const char* value, size_t size) {
  set_has_iconresource();
  iconresource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.iconResource)
}
::std::string* Favorite::mutable_iconresource() {
  set_has_iconresource();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.iconResource)
  return iconresource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_iconresource() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.iconResource)
  clear_has_iconresource();
  return iconresource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_iconresource(::std::string* iconresource) {
  if (iconresource != NULL) {
    set_has_iconresource();
  } else {
    clear_has_iconresource();
  }
  iconresource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconresource);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.iconResource)
}

// optional bytes icon = 18;
bool Favorite::has_icon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Favorite::set_has_icon() {
  _has_bits_[0] |= 0x00020000u;
}
void Favorite::clear_has_icon() {
  _has_bits_[0] &= ~0x00020000u;
}
void Favorite::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& Favorite::icon() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Favorite.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Favorite.icon)
}
void Favorite::set_icon(const char* value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Favorite.icon)
}
void Favorite::set_icon(const void* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Favorite.icon)
}
::std::string* Favorite::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Favorite.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Favorite::release_icon() {
  // @@protoc_insertion_point(field_release:launcher_backup.Favorite.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Favorite::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Favorite.icon)
}

inline const Favorite* Favorite::internal_default_instance() {
  return &Favorite_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Screen::kIdFieldNumber;
const int Screen::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Screen::Screen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.Screen)
}

void Screen::InitAsDefaultInstance() {
}

Screen::Screen(const Screen& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.Screen)
}

void Screen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&rank_) -
    reinterpret_cast<char*>(&id_) + sizeof(rank_));
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:launcher_backup.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
}

void Screen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Screen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Screen_descriptor_;
}

const Screen& Screen::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Screen> Screen_default_instance_;

Screen* Screen::New(::google::protobuf::Arena* arena) const {
  Screen* n = new Screen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.Screen)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Screen, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Screen*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, rank_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.Screen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.Screen)
  return false;
#undef DO_
}

void Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.Screen)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.Screen)
}

::google::protobuf::uint8* Screen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.Screen)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.Screen)
  return target;
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.Screen)
  size_t total_size = 0;

  // required int64 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }
  // optional int32 rank = 2;
  if (has_rank()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rank());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Screen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.Screen)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Screen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Screen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.Screen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.Screen)
    UnsafeMergeFrom(*source);
  }
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.Screen)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Screen::UnsafeMergeFrom(const Screen& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Screen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.Screen)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Screen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Screen::Swap(Screen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Screen::InternalSwap(Screen* other) {
  std::swap(id_, other->id_);
  std::swap(rank_, other->rank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Screen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Screen_descriptor_;
  metadata.reflection = Screen_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Screen

// required int64 id = 1;
bool Screen::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Screen::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Screen::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Screen::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
::google::protobuf::int64 Screen::id() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Screen.id)
  return id_;
}
void Screen::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Screen.id)
}

// optional int32 rank = 2;
bool Screen::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Screen::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
void Screen::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
void Screen::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
::google::protobuf::int32 Screen::rank() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Screen.rank)
  return rank_;
}
void Screen::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Screen.rank)
}

inline const Screen* Screen::internal_default_instance() {
  return &Screen_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource::kDpiFieldNumber;
const int Resource::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource::Resource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.Resource)
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.Resource)
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dpi_ = 0;
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:launcher_backup.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Resource> Resource_default_instance_;

Resource* Resource::New(::google::protobuf::Arena* arena) const {
  Resource* n = new Resource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.Resource)
  if (_has_bits_[0 / 32] & 3u) {
    dpi_ = 0;
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dpi = 1;
      case 1: {
        if (tag == 8) {
          set_has_dpi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dpi_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.Resource)
  // required int32 dpi = 1;
  if (has_dpi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dpi(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.Resource)
}

::google::protobuf::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.Resource)
  // required int32 dpi = 1;
  if (has_dpi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dpi(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.Resource)
  return target;
}

size_t Resource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:launcher_backup.Resource)
  size_t total_size = 0;

  if (has_dpi()) {
    // required int32 dpi = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dpi());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
size_t Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.Resource)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 dpi = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dpi());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.Resource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Resource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Resource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.Resource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.Resource)
    UnsafeMergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.Resource)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Resource::UnsafeMergeFrom(const Resource& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dpi()) {
      set_dpi(from.dpi());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.Resource)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Resource::Swap(Resource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource::InternalSwap(Resource* other) {
  std::swap(dpi_, other->dpi_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resource

// required int32 dpi = 1;
bool Resource::has_dpi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Resource::set_has_dpi() {
  _has_bits_[0] |= 0x00000001u;
}
void Resource::clear_has_dpi() {
  _has_bits_[0] &= ~0x00000001u;
}
void Resource::clear_dpi() {
  dpi_ = 0;
  clear_has_dpi();
}
::google::protobuf::int32 Resource::dpi() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Resource.dpi)
  return dpi_;
}
void Resource::set_dpi(::google::protobuf::int32 value) {
  set_has_dpi();
  dpi_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Resource.dpi)
}

// required bytes data = 2;
bool Resource::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Resource::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Resource::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Resource::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Resource::data() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Resource.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Resource::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Resource.data)
}
void Resource::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Resource.data)
}
void Resource::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Resource.data)
}
::std::string* Resource::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Resource.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Resource::release_data() {
  // @@protoc_insertion_point(field_release:launcher_backup.Resource.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Resource::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Resource.data)
}

inline const Resource* Resource::internal_default_instance() {
  return &Resource_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Widget::kProviderFieldNumber;
const int Widget::kLabelFieldNumber;
const int Widget::kConfigureFieldNumber;
const int Widget::kIconFieldNumber;
const int Widget::kPreviewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Widget::Widget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_backup_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:launcher_backup.Widget)
}

void Widget::InitAsDefaultInstance() {
  icon_ = const_cast< ::launcher_backup::Resource*>(
      ::launcher_backup::Resource::internal_default_instance());
  preview_ = const_cast< ::launcher_backup::Resource*>(
      ::launcher_backup::Resource::internal_default_instance());
}

Widget::Widget(const Widget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:launcher_backup.Widget)
}

void Widget::SharedCtor() {
  _cached_size_ = 0;
  provider_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_ = NULL;
  preview_ = NULL;
  configure_ = false;
}

Widget::~Widget() {
  // @@protoc_insertion_point(destructor:launcher_backup.Widget)
  SharedDtor();
}

void Widget::SharedDtor() {
  provider_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Widget_default_instance_.get()) {
    delete icon_;
    delete preview_;
  }
}

void Widget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Widget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Widget_descriptor_;
}

const Widget& Widget::default_instance() {
  protobuf_InitDefaults_backup_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Widget> Widget_default_instance_;

Widget* Widget::New(::google::protobuf::Arena* arena) const {
  Widget* n = new Widget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Widget::Clear() {
// @@protoc_insertion_point(message_clear_start:launcher_backup.Widget)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_provider()) {
      provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_label()) {
      label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    configure_ = false;
    if (has_icon()) {
      if (icon_ != NULL) icon_->::launcher_backup::Resource::Clear();
    }
    if (has_preview()) {
      if (preview_ != NULL) preview_->::launcher_backup::Resource::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Widget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:launcher_backup.Widget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string provider = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_provider()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->provider().data(), this->provider().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Widget.provider");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_label;
        break;
      }

      // optional string label = 2;
      case 2: {
        if (tag == 18) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "launcher_backup.Widget.label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configure;
        break;
      }

      // optional bool configure = 3;
      case 3: {
        if (tag == 24) {
         parse_configure:
          set_has_configure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &configure_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional .launcher_backup.Resource icon = 4;
      case 4: {
        if (tag == 34) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_preview;
        break;
      }

      // optional .launcher_backup.Resource preview = 5;
      case 5: {
        if (tag == 42) {
         parse_preview:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_preview()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:launcher_backup.Widget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:launcher_backup.Widget)
  return false;
#undef DO_
}

void Widget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:launcher_backup.Widget)
  // required string provider = 1;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Widget.provider");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->provider(), output);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Widget.label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional bool configure = 3;
  if (has_configure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->configure(), output);
  }

  // optional .launcher_backup.Resource icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->icon_, output);
  }

  // optional .launcher_backup.Resource preview = 5;
  if (has_preview()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->preview_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:launcher_backup.Widget)
}

::google::protobuf::uint8* Widget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:launcher_backup.Widget)
  // required string provider = 1;
  if (has_provider()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->provider().data(), this->provider().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Widget.provider");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->provider(), target);
  }

  // optional string label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "launcher_backup.Widget.label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->label(), target);
  }

  // optional bool configure = 3;
  if (has_configure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->configure(), target);
  }

  // optional .launcher_backup.Resource icon = 4;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->icon_, false, target);
  }

  // optional .launcher_backup.Resource preview = 5;
  if (has_preview()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->preview_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:launcher_backup.Widget)
  return target;
}

size_t Widget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:launcher_backup.Widget)
  size_t total_size = 0;

  // required string provider = 1;
  if (has_provider()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->provider());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional string label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool configure = 3;
    if (has_configure()) {
      total_size += 1 + 1;
    }

    // optional .launcher_backup.Resource icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->icon_);
    }

    // optional .launcher_backup.Resource preview = 5;
    if (has_preview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->preview_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Widget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:launcher_backup.Widget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Widget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Widget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:launcher_backup.Widget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:launcher_backup.Widget)
    UnsafeMergeFrom(*source);
  }
}

void Widget::MergeFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:launcher_backup.Widget)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Widget::UnsafeMergeFrom(const Widget& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_provider()) {
      set_has_provider();
      provider_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.provider_);
    }
    if (from.has_label()) {
      set_has_label();
      label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (from.has_configure()) {
      set_configure(from.configure());
    }
    if (from.has_icon()) {
      mutable_icon()->::launcher_backup::Resource::MergeFrom(from.icon());
    }
    if (from.has_preview()) {
      mutable_preview()->::launcher_backup::Resource::MergeFrom(from.preview());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Widget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:launcher_backup.Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Widget::CopyFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:launcher_backup.Widget)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Widget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_icon()) {
    if (!this->icon_->IsInitialized()) return false;
  }
  if (has_preview()) {
    if (!this->preview_->IsInitialized()) return false;
  }
  return true;
}

void Widget::Swap(Widget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Widget::InternalSwap(Widget* other) {
  provider_.Swap(&other->provider_);
  label_.Swap(&other->label_);
  std::swap(configure_, other->configure_);
  std::swap(icon_, other->icon_);
  std::swap(preview_, other->preview_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Widget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Widget_descriptor_;
  metadata.reflection = Widget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Widget

// required string provider = 1;
bool Widget::has_provider() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Widget::set_has_provider() {
  _has_bits_[0] |= 0x00000001u;
}
void Widget::clear_has_provider() {
  _has_bits_[0] &= ~0x00000001u;
}
void Widget::clear_provider() {
  provider_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_provider();
}
const ::std::string& Widget::provider() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.provider)
  return provider_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Widget::set_provider(const ::std::string& value) {
  set_has_provider();
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Widget.provider)
}
void Widget::set_provider(const char* value) {
  set_has_provider();
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Widget.provider)
}
void Widget::set_provider(const char* value, size_t size) {
  set_has_provider();
  provider_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Widget.provider)
}
::std::string* Widget::mutable_provider() {
  set_has_provider();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.provider)
  return provider_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Widget::release_provider() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.provider)
  clear_has_provider();
  return provider_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Widget::set_allocated_provider(::std::string* provider) {
  if (provider != NULL) {
    set_has_provider();
  } else {
    clear_has_provider();
  }
  provider_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.provider)
}

// optional string label = 2;
bool Widget::has_label() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Widget::set_has_label() {
  _has_bits_[0] |= 0x00000002u;
}
void Widget::clear_has_label() {
  _has_bits_[0] &= ~0x00000002u;
}
void Widget::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_label();
}
const ::std::string& Widget::label() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.label)
  return label_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Widget::set_label(const ::std::string& value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:launcher_backup.Widget.label)
}
void Widget::set_label(const char* value) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:launcher_backup.Widget.label)
}
void Widget::set_label(const char* value, size_t size) {
  set_has_label();
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:launcher_backup.Widget.label)
}
::std::string* Widget::mutable_label() {
  set_has_label();
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Widget::release_label() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.label)
  clear_has_label();
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Widget::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    set_has_label();
  } else {
    clear_has_label();
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.label)
}

// optional bool configure = 3;
bool Widget::has_configure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Widget::set_has_configure() {
  _has_bits_[0] |= 0x00000004u;
}
void Widget::clear_has_configure() {
  _has_bits_[0] &= ~0x00000004u;
}
void Widget::clear_configure() {
  configure_ = false;
  clear_has_configure();
}
bool Widget::configure() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.configure)
  return configure_;
}
void Widget::set_configure(bool value) {
  set_has_configure();
  configure_ = value;
  // @@protoc_insertion_point(field_set:launcher_backup.Widget.configure)
}

// optional .launcher_backup.Resource icon = 4;
bool Widget::has_icon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Widget::set_has_icon() {
  _has_bits_[0] |= 0x00000008u;
}
void Widget::clear_has_icon() {
  _has_bits_[0] &= ~0x00000008u;
}
void Widget::clear_icon() {
  if (icon_ != NULL) icon_->::launcher_backup::Resource::Clear();
  clear_has_icon();
}
const ::launcher_backup::Resource& Widget::icon() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.icon)
  return icon_ != NULL ? *icon_
                         : *::launcher_backup::Resource::internal_default_instance();
}
::launcher_backup::Resource* Widget::mutable_icon() {
  set_has_icon();
  if (icon_ == NULL) {
    icon_ = new ::launcher_backup::Resource;
  }
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.icon)
  return icon_;
}
::launcher_backup::Resource* Widget::release_icon() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.icon)
  clear_has_icon();
  ::launcher_backup::Resource* temp = icon_;
  icon_ = NULL;
  return temp;
}
void Widget::set_allocated_icon(::launcher_backup::Resource* icon) {
  delete icon_;
  icon_ = icon;
  if (icon) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.icon)
}

// optional .launcher_backup.Resource preview = 5;
bool Widget::has_preview() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Widget::set_has_preview() {
  _has_bits_[0] |= 0x00000010u;
}
void Widget::clear_has_preview() {
  _has_bits_[0] &= ~0x00000010u;
}
void Widget::clear_preview() {
  if (preview_ != NULL) preview_->::launcher_backup::Resource::Clear();
  clear_has_preview();
}
const ::launcher_backup::Resource& Widget::preview() const {
  // @@protoc_insertion_point(field_get:launcher_backup.Widget.preview)
  return preview_ != NULL ? *preview_
                         : *::launcher_backup::Resource::internal_default_instance();
}
::launcher_backup::Resource* Widget::mutable_preview() {
  set_has_preview();
  if (preview_ == NULL) {
    preview_ = new ::launcher_backup::Resource;
  }
  // @@protoc_insertion_point(field_mutable:launcher_backup.Widget.preview)
  return preview_;
}
::launcher_backup::Resource* Widget::release_preview() {
  // @@protoc_insertion_point(field_release:launcher_backup.Widget.preview)
  clear_has_preview();
  ::launcher_backup::Resource* temp = preview_;
  preview_ = NULL;
  return temp;
}
void Widget::set_allocated_preview(::launcher_backup::Resource* preview) {
  delete preview_;
  preview_ = preview;
  if (preview) {
    set_has_preview();
  } else {
    clear_has_preview();
  }
  // @@protoc_insertion_point(field_set_allocated:launcher_backup.Widget.preview)
}

inline const Widget* Widget::internal_default_instance() {
  return &Widget_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace launcher_backup

// @@protoc_insertion_point(global_scope)
